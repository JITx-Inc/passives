#use-added-syntax(jitx)
defpackage passives/crystal:
  import core
  import jitx
  import jitx/commands

  import jsl/ensure
  import jsl/errors
  import jsl/symbols
  import jsl/landpatterns
  import jsl/design/settings


public defstruct Crystal-Specs:
  part-number:String
  doc: \<DOC>
  Frequency in Hz
  <DOC>
  frequency:Toleranced
  doc: \<DOC>
  Load Capacitance in Farads
  <DOC>
  C-load:Double
  doc: \<DOC>
  Max Drive Level in Watts
  <DOC>
  max-drive-level:Double
  tcf:Toleranced
  ESR:Double
  f-aging:Toleranced
with:
  printer => true
  keyword-constructor => true

defn ppm (x:Double) -> Percentage:
  Percentage(x / 1.0e6)

public val FA-238-specs = [
  12 => Crystal-Specs(
    part-number = "FA-238V 12.0000MB-W3"
    frequency = 12.0e6 +/- ppm(50.0)
    C-load = 12.0e-12
    max-drive-level = 200.0e-6
    tcf = 0.0 +/- 30.0e-6
    ESR = 100.0
    f-aging = 0.0 +/- 5.0e-6
  ),
  25 => Crystal-Specs(
    part-number = "FA-238 25.0000MB-C0"
    frequency = 25.0e6 +/- ppm(50.0)
    C-load = 18.0e-12
    max-drive-level = 200.0e-6
    tcf = 0.0 +/- 30.0e-6
    ESR = 100.0
    f-aging = 0.0 +/- 5.0e-6
  )
]

defn get-specs (freq:Int) -> Crystal-Specs:
  val m = for kvp in FA-238-specs first :
    if key(kvp) == freq:
      One(value(kvp))
    else:
      None()

  match(m):
    (_:None): throw $ ValueError("No Crystal Matches Desired Frequency: %_" % [freq])
    (given:One<Crystal-Specs>): value(given)


defn make-specs (specs:Crystal-Specs):
  inside pcb-module:
    property(self.frequency) = frequency(specs)
    property(self.C-load) = C-load(specs)
    property(self.max-drive-level) = max-drive-level(specs)
    property(self.tcf) = tcf(specs)
    property(self.ESR) = ESR(specs)
    property(self.f-aging) = f-aging(specs)


public pcb-component FA-238 (freq:Int) :
  ensure-positive!("freq", freq)
  manufacturer = "EPSON"

  val specs = get-specs(freq)
  mpn = part-number(specs)
  description = to-string $ "Crystal, SMT, %_ Hz" % [frequency(specs)]
  reference-prefix = "X"

  make-specs(specs)

  pin-properties :
    [ pin : Ref | pads:Int ...   | side:Dir ]
    [ p[1]      | 1              | Left ]
    [ case[1]   | 2              | Right ]
    [ p[2]      | 3              | Down ]
    [ case[2]   | 4              | Down ]

  val symb = CrystalSymbol(case-ports = 2)
  assign-symbol $ create-symbol(symb)


  val pkg = SMT-Crystal()
  val lp = create-landpattern(pkg)
  assign-landpattern(lp)


val num-xtal-leads = 4

public defstruct SMT-Crystal <: Package:
  num-leads:Int with:
    as-method => true
    default => num-xtal-leads

  package-body:PackageBody with:
    as-method => true
    default => PackageBody(
      width = 3.2 +/- 0.1
      length = 2.5 +/- 0.1
      height = typ(0.7)
    )

  pad-planner:PadPlanner with:
    as-method => true
    default => RectanglePadPlanner

  lead-numbering:Numbering with:
    as-method => true
    default => LookupTableNumbering([
        [2, 1]
        [3, 4]
      ]
    )

  courtyard-excess:Double with:
    as-method => true
    default => 0.25

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true
    default => DensityLevelA ;  DENSITY-LEVEL


public defmethod name (x:SMT-Crystal) -> String :
  val b = package-body(x)
  to-string("SMT-Crystal-%_x%_" % [ width(b), length(b) ])

public defmethod build-pads (
  pkg:SMT-Crystal,
  vp:VirtualLP,
  ) -> False :

  val pad-seq = pad-grid-smt(
    pad-size = Dims(1.4, 1.2),
    planner = pad-planner(pkg),
    lead-grid = GridPlanner(
      pitch = Dims(2.2, 1.6),
      columns = 2
      rows = 2
    ),
    num-scheme = lead-numbering(pkg)
  )

  append-all(vp, pad-seq)


public defmethod build-silkscreen (
  pkg:SMT-Crystal,
  vp:VirtualLP,
  ) -> False :

  val eo = EdgesOutline(
    pkg-body = package-body(pkg),
    density-level = density-level(pkg)
  )
  build-outline(eo, vp)

  build-smd-pin-1-dot(vp, dir = Right)
  add-reference-designator(vp)
